name: Solar System Workflow


on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: ${{vars.MONGO_URI}}
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}



jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: mongodb://localhost:27017/superData
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
              
            
        strategy:
          matrix:
            node-version: [20, 18, 19]
            operating-system: [ubuntu-latest]
            exclude:
              - node-version: 18
                operating-system: macos-latest
            
        runs-on: ${{ matrix.operating-system }}
        steps:

        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: ${{ matrix.node-version }}

        - name: chaching the dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result${{matrix.node-version}}-${{ matrix.operating-system }}
            path: test-results.xml
            retention-days: 5  #store the artifact for 5 days

    code-coverage:
          name: code coverage
          runs-on: ubuntu-latest
          services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              options: 
                --name mongo
              
          env:
              MONGO_URI: mongodb://mongo:27017/superData
              MONGO_USERNAME: non-prod-user
              MONGO_PASSWORD: non-prod-password

          container: 
            image: node:18
          steps:

          - name: Checkout Repository
            uses: actions/checkout@v4

          # - name: Setup NodeJS Version 
          #   uses: actions/setup-node@v3
          #   with:
          #     node-version: 18
          
          - name: chaching the dependencies
            uses: actions/cache@v4
            with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

          - name: Install Dependencies
            run: npm install
      
          - name: Unit Testing
            continue-on-error: true
            run: npm run coverage

            
          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
              name: code coverage results
              path: coverage
              retention-days: 5  #store the artifact for 5 days 

    docker:

      name: Docker Build and Push
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: docker login
          uses: docker/login-action@v2
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: dhcr login
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build Docker Image
          uses: docker/build-push-action@v4
          with:
            context: .
            file: Dockerfile
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: test docker image
          run: |
            docker images 
            docker run -d --name solar-system -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system)
            echo "IP: $IP"

            echo "testing image using wget"
            wget -q -O - 127.0.0.1:3000/live | grep live 

        - name: Set lowercase repo owner
          id: lower_repo
          run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
       
        - name: push to github registry 
          uses: docker/build-push-action@v4
          with:
            context: .
            file: Dockerfile
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ steps.lower_repo.outputs.owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: [docker]
      uses: ./.github/workflows/reuseable_workflow.yaml
      secrets: inherit
            
    dev-integeration-testing:
      if: contains(github.ref, 'feature/')
      name: dev Integration Testing
      runs-on: ubuntu-latest
      needs: [dev-deploy]
      steps:
        

        - name: testing using curl and jq
          continue-on-error: true
          env:
            APP_URL: ${{ needs.dev-deploy.outputs.app_url }}
          run: |
            echo "testing using curl and jq"
            curl https://$APP_URL/live | jq -r '.status' | grep live
         
    prod-deploy:
      if: github.ref == 'refs/heads/main'
      environment: 
        name: production
        url: ${{ steps.set-app-url.outputs.APP_URL }}

      outputs: 
        app_url: ${{ steps.set-app-url.outputs.APP_URL }}

      permissions:
        id-token: write
        contents: read

      name: Deploy to Development Environment
      runs-on: ubuntu-latest
      needs: [docker]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4


        - name: install kubectl cli
          uses: azure/setup-kubectl@v1
          with:
            version: 'latest'
        

        - uses: azure/login@v2
          with:
              client-id: ${{ secrets.AZURE_CLIENT_ID }}
              tenant-id: ${{ secrets.AZURE_TENANT_ID }}
              subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          

        - uses: azure/aks-set-context@v4
          with:
               resource-group: 'CICD_testing_group'
               cluster-name: 'CICD_testing'
        - name: fetch kubernetes cluster details
          run: |
            kubectl version
            echo ----------------------------
            kubectl get nodes
        - name: saving ingress ip to env variable
          run: |
            echo "saving ingress ip to env variable"
            export INGRESS_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "INGRESS_IP=${INGRESS_IP}" >> $GITHUB_ENV

        - name: replace tokens in deployment.yaml
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/production/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: check token replacement
          run: |
            echo "checking token replacement"
            cat kubernetes/production/*.yaml

        - name: create mongo secret
          run: |
            echo "creating mongo secret"
            kubectl create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{env.MONGO_URI}} \
            --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
            --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
            -n ${{ vars.NAMESPACE }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -
            

              
        - name: deploy to production environment
          run: |
            echo "deploying to dev environment"
            kubectl apply -f kubernetes/production 
        
        - name: set app ingress host url 
          id: set-app-url
          run: |
            echo "setting app ingress host url"
            export APP_URL=$(kubectl get ingress -n ${{ vars.NAMESPACE }} -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')
            echo $APP_URL
            echo "APP_URL=${APP_URL}" >> $GITHUB_ENV
            
    prod-integeration-testing:
      if: github.ref == 'refs/heads/main'
      name: dev Integration Testing
      runs-on: ubuntu-latest
      needs: [prod-deploy]
      steps:

        - name: testing using curl and jq
          continue-on-error: true
          env:
            APP_URL: ${{ needs.prod-deploy.outputs.app_url }}
          run: |
            echo "testing using curl and jq"
            curl https://$APP_URL/live | jq -r '.status' | grep live

    

          
